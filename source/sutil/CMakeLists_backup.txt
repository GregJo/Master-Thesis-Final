
# 
# External dependencies
# 

# find_package(THIRDPARTY REQUIRED)

# Determine information about the compiler
include (CompilerInfo)
# Check for specific machine/compiler options.
include (ConfigCompilerFlags)

# 
# Library name and options
# 

# Target name
set(target sutil_sdk)

# Exit here if required dependencies are not met
message(STATUS "Lib ${target}")

# Set API export file and macro
string(MAKE_C_IDENTIFIER ${target} target_id)
string(TOUPPER ${target_id} target_id)
set(feature_file         "include/${target}/${target}_features.h")
set(export_file          "include/${target}/${target}_export.h")
set(template_export_file "include/${target}/${target}_api.h")
set(export_macro         "${target_id}_API")


# 
# Sources
# 

set(include_path "${CMAKE_CURRENT_SOURCE_DIR}/include/${target}")
set(source_path  "${CMAKE_CURRENT_SOURCE_DIR}/source")

#set(headers
#)

set(OptiX_INSTALL_DIR "$ENV{OptiX_INSTALL_DIR}")

#message(STATUS "OptiX_INSTALL_DIR ${OptiX_INSTALL_DIR}")

set(THESIS_CUDA_DIR ${OptiX_INSTALL_DIR}/SDK/cuda)
set(THESIS_SOURCE_CUDA_DIR ${PROJECT_SOURCE_DIR}/source/cuda)

configure_file(${PROJECT_SOURCE_DIR}/source/thesisConfig.h.in ${CMAKE_CURRENT_BINARY_DIR}/../thesisConfig.h @ONLY)

set(sources
      ${THESIS_SOURCE_CUDA_DIR}/commonStructs.h
      ${THESIS_SOURCE_CUDA_DIR}/helpers.h
      ${THESIS_SOURCE_CUDA_DIR}/intersection_refinement.h
      ${THESIS_SOURCE_CUDA_DIR}/phong.h
      ${THESIS_SOURCE_CUDA_DIR}/phong.cu
      ${THESIS_SOURCE_CUDA_DIR}/random.h
      ${THESIS_SOURCE_CUDA_DIR}/triangle_mesh.cu
      rply-1.01/rply.c
      rply-1.01/rply.h
      Arcball.cpp
      Arcball.h
      HDRLoader.cpp
      HDRLoader.h
      Mesh.cpp
      Mesh.h
      OptiXMesh.cpp
      OptiXMesh.h
      PPMLoader.cpp
      PPMLoader.h
      ${CMAKE_CURRENT_BINARY_DIR}/../thesisConfig.h
      sutil.cpp
      sutil.h
      sutilapi.h
      tinyobjloader/tiny_obj_loader.cc
      tinyobjloader/tiny_obj_loader.h
      PNGLoader.h
)

if(OPENGL_FOUND AND NOT APPLE)
  list(APPEND sources "glew.c" "GL/glew.h")
  if( WIN32 )
    list(APPEND sources "GL/wglew.h")
  else()
    list(APPEND sources "GL/glxew.h")
  endif()

  if( WIN32 )
    add_definitions(-DGLEW_BUILD)
  endif()

  if(USING_GNU_CXX OR USING_CLANG_CXX)
    # glew.c #includes glew.h which contains "lax" function prototypes
    set_source_files_properties("glew.c" PROPERTIES COMPILE_FLAGS  "-Wno-strict-prototypes -Wno-missing-prototypes")

  endif()
  
endif()

set(OptiX_INSTALL_DIR "$ENV{OptiX_INSTALL_DIR}")

#include(${OptiX_INSTALL_DIR}/SDK/CMake/FindCUDA.cmake)
include(FindCUDA)

# Compile the cuda files to ptx.  Note that this will ignore all of the non CUDA
# files.

if(NOT CUDA_NVRTC_ENABLED)
  message("CUDA_NVRTC_ENABLED ${CUDA_NVRTC_ENABLED}")
  # Be cautious to pass the second parameter without '${}', else it will lead to an error with the cmake list sub command.
  CUDA_COMPILE_PTX(ptx_files sources)
endif()

# Group source files
#set(header_group "Header Files (API)")
set(source_group "Source Files")
#source_group_by_path(${include_path} "\\\\.h$|\\\\.hpp$" 
#    ${header_group} ${headers})
#source_group_by_path(${source_path}  "\\\\.cpp$|\\\\.c$|\\\\.h$|\\\\.hpp$" 
#    ${source_group} ${sources})


# 
# Create library
#

include(FindSUtilGLUT)

if(GLUT_FOUND AND OPENGL_FOUND)

  include_directories(${GLUT_INCLUDE_DIR})
  add_definitions(-DGLUT_FOUND -DGLUT_NO_LIB_PRAGMA)

endif()

# Build library
set(sutil_target "sutil_sdk")
if(CUDA_NVRTC_ENABLED)
  add_library(${sutil_target} ${sources})
else()
  add_library(${sutil_target} ${sources} ${ptx_files})
endif()

# Note that if the GLUT_LIBRARIES and OPENGL_LIBRARIES haven't been looked for,
# these variable will be empty.
target_link_libraries(${sutil_target}
  optix
  optixu
  ${GLUT_LIBRARIES}
  ${OPENGL_LIBRARIES}
  )
if(CUDA_NVRTC_ENABLED)
  message("CUDA_NVRTC_ENABLED")
  target_link_libraries(${sutil_target}  ${CUDA_nvrtc_LIBRARY})
endif()
if(WIN32)
  target_link_libraries(${sutil_target} winmm.lib)
endif()

# Copy the free glut dlls as part of the sutil build process
if(WIN32)
  if(CMAKE_GENERATOR MATCHES "Visual Studio")
    set( build_configuration "$(ConfigurationName)" )
  else()
    set( build_configuration "${CMAKE_BUILD_TYPE}")
  endif()

  add_custom_command(TARGET ${sutil_target}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND}
    -D build_configuration:STRING=${build_configuration}
    -D "output_directory:PATH=${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}"
    -D "source_dll:FILE=${GLUT_glut_DLL}"
    -P "${CMAKE_SOURCE_DIR}/CMake/CopyDLL.cmake"
    )
endif()

# Create namespaced alias
add_library(${META_PROJECT_NAME}::${target} ALIAS ${target})

# Export library for downstream projects
export(TARGETS ${target} NAMESPACE ${META_PROJECT_NAME}:: FILE ${PROJECT_BINARY_DIR}/cmake/${target}/${target}-export.cmake)

# Create feature detection header
# Compilers: https://cmake.org/cmake/help/v3.1/variable/CMAKE_LANG_COMPILER_ID.html#variable:CMAKE_%3CLANG%3E_COMPILER_ID
# Feature: https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html

# Check for availability of module; use pre-generated version if not found
#if (WriterCompilerDetectionHeaderFound)
#    write_compiler_detection_header(
#        FILE ${feature_file}
#        PREFIX ${target_id}
#        COMPILERS AppleClang Clang GNU MSVC
#        FEATURES cxx_alignas cxx_alignof cxx_constexpr cxx_final cxx_noexcept cxx_nullptr cxx_sizeof_member cxx_thread_local
#        VERSION 3.2
#    )
#else()
#    file(
#        COPY ${PROJECT_SOURCE_DIR}/source/codegeneration/${target}_features.h
#        DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/${target}
#        USE_SOURCE_PERMISSIONS
#    )
#endif()

# Create API export header
generate_export_header(${target}
    EXPORT_FILE_NAME  ${export_file}
    EXPORT_MACRO_NAME ${export_macro}
)

#generate_template_export_header(${target}
#    ${target_id}
#    ${template_export_file}
#)


# 
# Project options
# 

set_target_properties(${target}
    PROPERTIES
    ${DEFAULT_PROJECT_OPTIONS}
    FOLDER "${IDE_FOLDER}"
    VERSION ${META_VERSION}
    SOVERSION ${META_VERSION_MAJOR}
)



# 
# Include directories
# 

set(OptiX_INSTALL_DIR "$ENV{OptiX_INSTALL_DIR}")

target_include_directories(${target}
    PRIVATE
    ${PROJECT_BINARY_DIR}/source/include
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_BINARY_DIR}/include
    ${OptiX_INCLUDE}
    ${source_path}/sutil/LodePNG
    ${OptiX_INSTALL_DIR}/SDK/cuda

    PUBLIC
    ${DEFAULT_INCLUDE_DIRECTORIES}

    INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
    $<INSTALL_INTERFACE:include>
)


# 
# Libraries
# 

target_link_libraries(${target}
    PRIVATE

    PUBLIC
    ${DEFAULT_LIBRARIES}

    INTERFACE
)


# 
# Compile definitions
# 

target_compile_definitions(${target}
    PRIVATE

    PUBLIC
    $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:${target_id}_STATIC_DEFINE>
    ${DEFAULT_COMPILE_DEFINITIONS}

    INTERFACE
)


# 
# Compile options
# 

target_compile_options(${target}
    PRIVATE

    PUBLIC
    ${DEFAULT_COMPILE_OPTIONS}

    INTERFACE
)


# 
# Linker options
# 

target_link_libraries(${target}
    PRIVATE

    PUBLIC
    ${DEFAULT_LINKER_OPTIONS}

    INTERFACE
)


#
# Target Health
#

perform_health_checks(
    ${target}
    ${sources}
#    ${headers}
)


# 
# Deployment
# 

# Library
install(TARGETS ${target}
    EXPORT  "${target}-export"            COMPONENT dev
    RUNTIME DESTINATION ${INSTALL_BIN}    COMPONENT runtime
    LIBRARY DESTINATION ${INSTALL_SHARED} COMPONENT runtime
    ARCHIVE DESTINATION ${INSTALL_LIB}    COMPONENT dev
)

# Header files
install(DIRECTORY
    ${CMAKE_CURRENT_SOURCE_DIR}/include/${target} DESTINATION ${INSTALL_INCLUDE}
    COMPONENT dev
)

# Generated header files
install(DIRECTORY
    ${CMAKE_CURRENT_BINARY_DIR}/include/${target} DESTINATION ${INSTALL_INCLUDE}
    COMPONENT dev
)

# CMake config
install(EXPORT ${target}-export
    NAMESPACE   ${META_PROJECT_NAME}::
    DESTINATION ${INSTALL_CMAKE}/${target}
    COMPONENT   dev
)

if(RELEASE_INSTALL_BINARY_SAMPLES AND NOT RELEASE_STATIC_BUILD)
  # If performing a release install, we want to use rpath for our install name.
  # The executables' rpaths will then be set to @executable_path so we can invoke
  # the samples from an arbitrary location and it will still find this library.
  set_target_properties(${sutil_target} PROPERTIES
    INSTALL_NAME_DIR "@rpath"
    BUILD_WITH_INSTALL_RPATH ON
    )
  install(TARGETS ${sutil_target}
    RUNTIME DESTINATION ${SDK_BINARY_INSTALL_DIR}
    LIBRARY DESTINATION ${SDK_BINARY_INSTALL_DIR}
    )
endif()

# Make the list of sources available to the parent directory for installation needs.
set(sutil_sources "${sources}" PARENT_SCOPE)

set_property(TARGET ${sutil_target} PROPERTY FOLDER "${OPTIX_IDE_FOLDER}")

set(CUDA_NVRTC_ENABLED ON CACHE BOOL "Use NVRTC to compile PTX at run-time instead of NVCC at build-time")

##################################################################
# SUtil compilation

#include(cmake/FindSUtilGLUT.cmake)

set(THESIS_PTX_DIR "${CMAKE_BINARY_DIR}/lib/ptx")
set(THESIS_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

set(CUDA_GENERATED_OUTPUT_DIR ${SAMPLES_PTX_DIR})

if (WIN32)
  string(REPLACE "/" "\\\\" THESIS_PTX_DIR ${THESIS_PTX_DIR})
else (WIN32)
  if ( USING_GNU_C AND NOT APPLE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DM_PI=3.14159265358979323846" )
  endif()
endif (WIN32)

# NVRTC include paths relative to the sample path
set(THESIS_RELATIVE_INCLUDE_DIRS "\\
  \"/sutil\", \\
  \"/cuda\", ")

#
# Q: Why do i have to generate it twice in order to get the optixu path included into my sutil project? 
#
# NVRTC absolute include paths to the headers used to build the samples
set(THESIS_ABSOLUTE_INCLUDE_DIRS "\\
  \"${OptiX_INCLUDE}\", \\
  \"${OptiX_INCLUDE}/optixu\", \\
  \"${CUDA_INCLUDE_DIRS}\", ")

# Build a null-terminated option list for NVRTC
set(CUDA_NVRTC_OPTIONS)
foreach(flag ${CUDA_NVRTC_FLAGS})
  set(CUDA_NVRTC_OPTIONS "${CUDA_NVRTC_OPTIONS} \\\n  \"${flag}\",")
endforeach()
set(CUDA_NVRTC_OPTIONS "${CUDA_NVRTC_OPTIONS} \\\n  0,")

# Path to sutil.h that all the samples need
include_directories( #${CMAKE_CURRENT_SOURCE_DIR}/sutil
                     ${CMAKE_CURRENT_SOURCE_DIR}
                     ${OptiX_INCLUDE}/optixu
                     ${CMAKE_CURRENT_BINARY_DIR}
                     ${CUDA_INCLUDE_DIRS} )

message("sutil path ${CMAKE_CURRENT_SOURCE_DIR}/sutil")

set(THESIS_CUDA_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cuda)